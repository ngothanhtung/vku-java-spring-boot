{
	"info": {
		"_postman_id": "41e6a2a9-24a5-49c5-809f-c8b7c8259784",
		"name": "🚀 TRAINING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46920926"
	},
	"item": [
		{
			"name": "🛍️ Online Shop",
			"item": [
				{
					"name": "Categories",
					"item": [
						{
							"name": "Run",
							"item": [
								{
									"name": "GET ALL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Thời gian phản hồi dưới 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 200ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test('3. Response must be valid and have a body', function () {",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});",
													"",
													"",
													"pm.test('4. Json must be an array', () => {",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.be.an('array');",
													"});",
													"",
													"",
													"pm.test(\"5. Schema is valid\", () => {",
													"    var schema = {",
													"        type: \"array\",",
													"        items: {",
													"            type: \"object\",",
													"            properties: {",
													"                id: { type: \"number\" },",
													"                name: { type: \"string\" },",
													"                description: { type: [\"string\", \"null\"] }",
													"",
													"            },",
													"            required: [\"id\", \"name\", \"description\"],",
													"            additionalProperties: false,",
													"        }",
													"    };",
													"",
													"    const responseJson = pm.response.json();",
													"    pm.expect(responseJson).to.be.jsonSchema(schema);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/online-shop/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"online-shop",
												"categories"
											]
										},
										"description": "This endpoint makes an HTTP GET request to retrieve the categories for an online shop.\n\n### Response\n\nThe response for this request is a JSON schema representing the categories available in the online shop."
									},
									"response": []
								},
								{
									"name": "GET BY ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"packages": {},
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/online-shop/categories/13109",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"online-shop",
												"categories",
												"13109"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a category",
							"item": [
								{
									"name": "POST",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test('2. Response time is less than 200ms', function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test('3. Response must be valid and have a body', function () {",
													"  pm.response.to.be.withBody;",
													"  pm.response.to.be.json;",
													"});",
													"",
													"pm.test('4. Json must be a object', () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.an('object');",
													"});",
													"",
													"pm.test('5. Schema is valid', () => {",
													"  var schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"id\": { \"type\": \"number\" },",
													"            \"name\": { \"type\": \"string\" },        ",
													"            \"description\":  {\"type\": [\"string\", \"null\"]}",
													"        },",
													"        \"required\": [\"id\", \"name\", \"description\"]",
													"",
													"  };",
													"",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Thời trang 101011111\",\n    \"description\": \"Category\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/online-shop/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "TC-API-Category-01: Create new category",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('1. Status code is 201', function () {",
													"  pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test('2. Response time is less than 200ms', function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test('3. Response must be valid and have a body', function () {",
													"  pm.response.to.be.withBody;",
													"  pm.response.to.be.json;",
													"});",
													"",
													"pm.test('4. Json must be a object', () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.an('object');",
													"});",
													"",
													"pm.test('5. Schema is valid', () => {",
													"  var schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"id\": { \"type\": \"number\" },",
													"            \"name\": { \"type\": \"string\" },        ",
													"            \"description\":  {\"type\": [\"string\", \"null\"]}",
													"        },",
													"        \"required\": [\"id\", \"name\", \"description\"]",
													"",
													"  };",
													"",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.jsonSchema(schema);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Áo quần 8545415745841\",\n    \"description\": \"Category description\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/online-shop/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (duplicate key)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"1. Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test('2. Response time is less than 200ms', function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test('3. Response must be valid and have a body', function () {",
													"  pm.response.to.be.withBody;",
													"  pm.response.to.be.json;",
													"});",
													"",
													"pm.test('4. Json must be a object', () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.an('object');",
													"});",
													"",
													"pm.test(\"5. Schema is valid\", () => {",
													"  var schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"statusCode\": { \"type\": \"number\" },",
													"            \"message\": { \"type\": \"array\" },        ",
													"            \"error\":  { \"type\": \"string\" }",
													"        },",
													"        \"required\": [\"statusCode\", \"message\", \"error\"],",
													"        \"additionalProperties\": false",
													"  };",
													"",
													"  const responseJson = pm.response.json();  ",
													"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
													"});",
													"",
													"pm.test(\"6. Values is correct'\", function () {",
													"  var jsonData = pm.response.json();",
													"  pm.expect(jsonData.statusCode).to.equal(400);",
													"  pm.expect(jsonData.message).to.contains('Name must be unique');",
													"  pm.expect(jsonData.error).to.eql('Bad Request');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Cafe\",\n    \"description\": \"New Desc\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/online-shop/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (Name is required)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"1. Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test('2. Response time is less than 200ms', function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test('3. Response must be valid and have a body', function () {",
													"  pm.response.to.be.withBody;",
													"  pm.response.to.be.json;",
													"});",
													"",
													"pm.test('4. Json must be a object', () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.an('object');",
													"});",
													"",
													"pm.test(\"5. Schema is valid\", () => {",
													"  var schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"statusCode\": { \"type\": \"number\" },",
													"            \"message\": { \"type\": \"array\" },        ",
													"            \"error\":  { \"type\": \"string\" }",
													"        },",
													"        \"required\": [\"statusCode\", \"message\", \"error\"]",
													"",
													"  };",
													"",
													"  const responseJson = pm.response.json();  ",
													"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
													"});",
													"",
													"pm.test(\"6. Values is correct'\", function () {",
													"  var jsonData = pm.response.json();",
													"  pm.expect(jsonData.statusCode).to.eql(400);",
													"  pm.expect(jsonData.message).to.contains('Name is required');",
													"  pm.expect(jsonData.error).to.eql('Bad Request');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{    \n    \"description\": \"New Desc\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/online-shop/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (Name with length 1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"1. Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test('2. Response time is less than 200ms', function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test('3. Response must be valid and have a body', function () {",
													"  pm.response.to.be.withBody;",
													"  pm.response.to.be.json;",
													"});",
													"",
													"pm.test('4. Json must be a object', () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.an('object');",
													"});",
													"",
													"pm.test(\"5. Schema is valid\", () => {",
													"  var schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"statusCode\": { \"type\": \"number\" },",
													"            \"message\": { \"type\": \"array\" },        ",
													"            \"error\":  { \"type\": \"string\" }",
													"        },",
													"        \"required\": [\"statusCode\", \"message\", \"error\"]",
													"",
													"  };",
													"",
													"  const responseJson = pm.response.json();  ",
													"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
													"});",
													"",
													"pm.test(\"6. Values is correct'\", function () {",
													"  var jsonData = pm.response.json();",
													"  pm.expect(jsonData.statusCode).to.eql(400);",
													"  pm.expect(jsonData.message).to.contains('Name must be greater than 1 and less than or equal 50 characters');",
													"  pm.expect(jsonData.error).to.eql('Bad Request');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\",\n    \"description\": \"New Desc\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/online-shop/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "POST (Name with length 50)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"1. Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"pm.test('2. Response time is less than 200ms', function () {",
													"  pm.expect(pm.response.responseTime).to.be.below(200);",
													"});",
													"",
													"pm.test('3. Response must be valid and have a body', function () {",
													"  pm.response.to.be.withBody;",
													"  pm.response.to.be.json;",
													"});",
													"",
													"pm.test('4. Json must be a object', () => {",
													"  const responseJson = pm.response.json();",
													"  pm.expect(responseJson).to.be.an('object');",
													"});",
													"",
													"pm.test(\"5. Schema is valid\", () => {",
													"  var schema = {",
													"        \"type\": \"object\",",
													"        \"properties\": {",
													"            \"statusCode\": { \"type\": \"number\" },",
													"            \"message\": { \"type\": \"array\" },        ",
													"            \"error\":  { \"type\": \"string\" }",
													"        },",
													"        \"required\": [\"statusCode\", \"message\", \"error\"]",
													"",
													"  };",
													"",
													"  const responseJson = pm.response.json();  ",
													"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
													"});",
													"",
													"pm.test(\"6. Values is correct'\", function () {",
													"  var jsonData = pm.response.json();",
													"  pm.expect(jsonData.statusCode).to.eql(400);",
													"  pm.expect(jsonData.message).to.contains('Name must be greater than 1 and less than or equal 50 characters');",
													"  pm.expect(jsonData.error).to.eql('Bad Request');",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Name must be greater\",\n    \"description\": \"New Desc\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/online-shop/categories",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"online-shop",
												"categories"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Run Auth",
							"item": []
						},
						{
							"name": "GET ALL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Lấy JSON response chỉ một lần",
											"const responseJson = pm.response.json();",
											"",
											"",
											"// Kiểm tra mã trạng thái",
											"pm.test(\"Status code is 200\", () => {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"// Kiểm tra thời gian phản hồi",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"// Kiểm tra body và định dạng JSON",
											"pm.test(\"Response must be valid and have a JSON body\", () => {",
											"  pm.response.to.have.body;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"// Kiểm tra response là mảng",
											"pm.test(\"JSON must be an array\", () => {",
											"  pm.expect(responseJson).to.be.an('array');",
											"});",
											"",
											"// Kiểm tra từng phần tử trong mảng có đúng schema",
											"pm.test(\"C1: Each item in array must match schema\", () => {",
											"  const schema = {",
											"    type: 'array',",
											"    items: {",
											"      type: 'object',",
											"      properties: {",
											"        id: { type: 'integer' },",
											"        name: { type: 'string' },",
											"        description: { type: ['string', 'null'] },",
											"      },",
											"      required: ['id', 'name', 'description'],",
											"      additionalProperties: false,",
											"    },",
											"  };",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);",
											"});",
											"",
											"",
											"pm.test(\"C2: Each item in array has correct properties and types\", () => {",
											"  pm.expect(responseJson).to.be.an('array');",
											"",
											"  responseJson.forEach((item, index) => {",
											"    pm.expect(item).to.be.an('object', `Item at index ${index} is not an object`);",
											"    ",
											"     // Kiểm tra các trường bắt buộc tồn tại",
											"    ['id', 'name', 'description'].forEach((key) => {",
											"      pm.expect(item.hasOwnProperty(key), `Item at index ${index} is missing key: ${key}`).to.be.true;",
											"    });",
											"",
											"    // Kiểm tra kiểu dữ liệu",
											"    pm.expect(item.id).to.be.a('number', `item[${index}].id should be a number`);",
											"    pm.expect(item.name).to.be.a('string', `item[${index}].name should be a string`);",
											"    pm.expect(",
											"      typeof item.description === 'string' || item.description === null,",
											"      `item[${index}].description should be a string or null`",
											"    ).to.be.true;",
											"  });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve the categories for an online shop.\n\n### Response\n\nThe response for this request is a JSON schema representing the categories available in the online shop."
							},
							"response": []
						},
						{
							"name": "GET BY ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"2. Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"4. Json must be a object\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"    var schema = { ",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"name\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"description\": { ",
											"                \"type\": [\"string\", \"null\"]",
											"            },",
											"        },",
											"        \"required\": [\"id\", \"name\", \"description\"],",
											"        \"additionalProperties\": false",
											"        };",
											"",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.jsonSchema(schema)",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET BY ID (Chai)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('Response must be valid and have a body within json', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Json must be an object', () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test(\"Validate the schema of the response body\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.have.property('id').that.is.a('number');    ",
											"    pm.expect(responseData).to.have.property('name').that.is.a('string');    ",
											"    pm.expect(responseData).to.have.property('description').that.is.a('string');    ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Products BY ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"2. Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"4. Json must be an array\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"    var schema = {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"            \"id\": { \"type\": \"integer\" },",
											"            \"name\": { \"type\": \"string\" },",
											"            \"price\": { \"type\": \"number\" },",
											"            \"discount\": { \"type\": \"number\" },",
											"            \"stock\": { \"type\": \"integer\" },",
											"            \"description\": { \"type\": \"string\" },",
											"            \"categoryId\": { \"type\": \"integer\" },",
											"            \"supplierId\": { \"type\": \"integer\" },",
											"            \"category\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                \"id\": { \"type\": \"integer\" },",
											"                \"name\": { \"type\": \"string\" },",
											"                \"description\": { \"type\": \"string\" }",
											"                },",
											"                \"required\": [\"id\", \"name\", \"description\"]",
											"            },",
											"            \"supplier\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                \"id\": { \"type\": \"integer\" },",
											"                \"name\": { \"type\": \"string\" },",
											"                \"phoneNumber\": { \"type\": \"string\" },",
											"                \"email\": { \"type\": [\"string\", \"null\"] },",
											"                \"address\": { \"type\": \"string\" }",
											"                },",
											"                \"required\": [\"id\", \"name\", \"phoneNumber\", \"email\", \"address\"]",
											"            }",
											"            },",
											"            \"required\": [",
											"                \"id\",",
											"                \"name\",",
											"                \"price\",",
											"                \"discount\",",
											"                \"stock\",",
											"                \"description\",",
											"                \"categoryId\",",
											"                \"supplierId\",",
											"                \"category\",",
											"                \"supplier\"",
											"            ]",
											"        }",
											"    };",
											"",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.jsonSchema(schema)",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/0/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"0",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET BY ID - Invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"2. Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"4. Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"  var schema = {",
											"        type: \"object\",",
											"        properties: {",
											"            statusCode: { \"type\": \"number\" },",
											"            message: { \"type\": \"array\" },        ",
											"            error: { \"type\": \"string\" },",
											"        },",
											"        required: [\"statusCode\", \"message\", \"error\"]",
											"",
											"  };",
											"",
											"  const responseJson = pm.response.json();  ",
											"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
											"});",
											"",
											"",
											"pm.test(\"6. Values is correct'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.equal(400);",
											"    pm.expect(jsonData.message).to.contains(\"Invalid route params\");",
											"    pm.expect(jsonData.error).to.equal('Bad Request');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/1b",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"1b"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET BY ID - Not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Status code is 410\", function () {",
											"    pm.response.to.have.status(410);",
											"});",
											"",
											"pm.test(\"2. Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"4. Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"  var schema = {",
											"    type: 'object',",
											"    properties: {    ",
											"       \"statusCode\": { \"type\": \"number\" },",
											"        \"message\": { \"type\": \"array\" },        ",
											"        \"error\":  { \"type\": \"string\" }  ",
											"    },",
											"    required: ['message'],",
											"  };",
											"",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"6. Values is correct'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.statusCode).to.equal(410);",
											"    pm.expect(jsonData.message).to.contains(\"Category not found\");",
											"    pm.expect(jsonData.error).to.equal('Bad Request');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/45555",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"45555"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"2. Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"4. Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"  var schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": { \"type\": \"number\" },",
											"            \"name\": { \"type\": \"string\" },        ",
											"            \"description\":  {\"type\": [\"string\", \"null\"]}",
											"        },",
											"        \"required\": [\"id\", \"name\", \"description\"]",
											"",
											"  };",
											"",
											"  const responseJson = pm.response.json();  ",
											"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Danh mục 2\"    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH (Duplicated)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('1. Status code is 400', function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test('2. Response time is less than 200ms', function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test('4. Json must be a object', () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('5. Schema is valid', () => {",
											"  var schema = {",
											"    type: 'object',",
											"    properties: {",
											"      statusCode: { type: 'number' },",
											"      message: { type: 'array', items: { type: 'string' } },",
											"      error: { type: 'string' },",
											"    },",
											"    required: ['statusCode', 'message', 'error'],",
											"  };",
											"",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);",
											"});",
											"",
											"pm.test('6. Values is correct', function () {",
											"  var json = pm.response.json();",
											"  pm.expect(json.statusCode).to.eql(400);",
											"  pm.expect(json.message).to.include('Name must be unique');",
											"  pm.expect(json.error).to.eql('Bad Request');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"HDD\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH (410 Gone)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('1. Status code is 410', function () {",
											"  pm.response.to.have.status(410);",
											"});",
											"",
											"pm.test('2. Response time is less than 200ms', function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test('4. Json must be a object', () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('5. Schema is valid', () => {",
											"  var schema = {",
											"    type: 'object',",
											"    properties: {",
											"      statusCode: { type: 'number' },",
											"      message: { type: 'array', items: { type: 'string' } },",
											"      error: { type: 'string' },",
											"    },",
											"    required: ['message'],",
											"  };",
											"",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);",
											"});",
											"",
											"pm.test(\"6. Values is correct\", function () {",
											"  var json = pm.response.json();",
											"  pm.expect(json.statusCode).to.eql(410);",
											"  pm.expect(json.message).to.include('Category not found');",
											"  pm.expect(json.error).to.eql('Bad Request');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sản phẩm 3883\",\r\n    \"description\": \"Mô tả ... 3883\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/38831111",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"38831111"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH BY ID - Invalid Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('1. Status code is 400', function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test('2. Response time is less than 200ms', function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test('4. Json must be a object', () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('5. Schema is valid', () => {",
											"  var schema = {",
											"    type: 'object',",
											"    properties: {",
											"      statusCode: { type: 'number' },",
											"      message: { type: 'array', items: { type: 'string' } },",
											"      error: { type: 'string' },",
											"    },",
											"    required: ['statusCode', 'message', 'error'],",
											"  };",
											"",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);",
											"});",
											"",
											"pm.test('6. Values is correct', function () {",
											"  var json = pm.response.json();",
											"  pm.expect(json.statusCode).to.equal(400);",
											"  pm.expect(json.message).to.include('Validation failed (numeric string is expected)');",
											"  pm.expect(json.error).to.equal('Invalid route params');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sản phẩm 3883\",\r\n    \"description\": \"Mô tả ... 3883\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/1x",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"1x"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"2. Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"4. Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"  var schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {            ",
											"            \"message\": { \"type\": \"string\" },                    ",
											"        },",
											"        \"required\": [\"message\"]",
											"",
											"  };",
											"",
											"  const responseJson = pm.response.json();  ",
											"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
											"});",
											"",
											" ",
											"pm.test(\"6. Message is 'Category deleted'\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql('Category deleted');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/38",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"38"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE (Foreign Key)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"2. Response time is less than 200ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"4. Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"  var schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {            ",
											"            \"statusCode\": { \"type\": \"number\" },                    ",
											"            \"message\": { \"type\": \"array\", \"items\": { \"type\": \"string\" }  },          ",
											"            \"error\": { \"type\": \"string\" },                       ",
											"        },",
											"        \"required\": [\"statusCode\", \"message\", \"error\"]",
											"",
											"  };",
											"",
											"  const responseJson = pm.response.json();  ",
											"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
											"});",
											"",
											"",
											"pm.test(\"6. Values is correct'\", function () {",
											"  var jsonData = pm.response.json();",
											"  pm.expect(jsonData.statusCode).to.eql(400);",
											"  pm.expect(jsonData.message).to.eql(['Cannot delete category with products']);",
											"  pm.expect(jsonData.error).to.eql('Bad Request');",
											"});",
											" "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE (410 Gone)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('1. Status code is 410', function () {",
											"  pm.response.to.have.status(410);",
											"});",
											"",
											"pm.test('2. Response time is less than 200ms', function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											"pm.test('3. Response must be valid and have a body', function () {",
											"  pm.response.to.be.withBody;",
											"  pm.response.to.be.json;",
											"});",
											"",
											"pm.test('4. Json must be a object', () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an('object');",
											"});",
											"",
											"pm.test('5. Schema is valid', () => {",
											"  var schema = {",
											"    type: 'object',",
											"    properties: {",
											"      statusCode: { type: 'number' },",
											"      message: { type: 'array', items: { type: 'string' } },",
											"      error: { type: 'string' },",
											"    },",
											"    required: ['statusCode', 'message', 'error'],",
											"  };",
											"",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);",
											"});",
											"",
											"pm.test('6. Values is correct', function () {",
											"  var jsonData = pm.response.json();",
											"  pm.expect(jsonData.statusCode).to.eql(410);",
											"  pm.expect(jsonData.message).to.include('Category not found');",
											"  pm.expect(jsonData.error).to.eql('Bad Request');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/categories/12117",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"categories",
										"12117"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Suppliers",
					"item": [
						{
							"name": "GET",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {     ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be an array\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"Assert that every object contains keys or properties\", () => {",
											"",
											"    var schema = {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"id\": { \"type\": \"number\" },",
											"                \"name\": { \"type\": \"string\" },        ",
											"                \"phoneNumber\": { \"type\": \"string\" },        ",
											"                \"email\": { \"type\": \"string\" },        ",
											"                \"address\":  { \"oneOf:\":[{\"type\": \"string\"}, {\"type\": \"null\"}] }",
											"            },",
											"            \"required\": [\"id\", \"name\", \"phoneNumber\", \"email\"]",
											"        }",
											"    };",
											"",
											"    const responseJson = pm.response.json();  ",
											"    pm.expect(responseJson).to.be.jsonSchema(schema)     ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/suppliers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"suppliers"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\r\n    \"address\": \"{{$randomStreetName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/suppliers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"suppliers"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/suppliers/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"suppliers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH",
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"abc@example.com\",\r\n    \"phoneNumber\": \"090X.XYZ.111\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://server.aptech.io/online-shop/suppliers/16",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"suppliers",
										"16"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET BY ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/online-shop/suppliers/2",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"suppliers",
										"2"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Products",
					"item": [
						{
							"name": "TC001 - Get all products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {     ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be an array\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"Assert that every object contains keys or properties\", () => {",
											"",
											"    var schema = {",
											"        \"type\": \"array\",",
											"        \"items\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"id\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"name\": {",
											"                    \"type\": \"string\"",
											"                },",
											"                \"price\": {",
											"                    \"type\": \"number\"",
											"                },",
											"                \"discount\": {",
											"                    \"type\": \"number\"",
											"                },",
											"                \"stock\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"description\": {",
											"                    \"type\": [\"string\", \"null\"]",
											"                },",
											"                \"categoryId\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"supplierId\": {",
											"                    \"type\": \"integer\"",
											"                },",
											"                \"category\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"name\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"description\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"name\",",
											"                        \"description\"",
											"                    ],",
											"                    \"additionalProperties\": false",
											"                },",
											"                \"supplier\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"id\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"name\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"phoneNumber\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"email\": {",
											"                            \"type\": \"string\"",
											"                        },",
											"                        \"address\": {",
											"                            \"type\": \"string\"",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"id\",",
											"                        \"name\",",
											"                        \"phoneNumber\",",
											"                        \"email\",",
											"                        \"address\"",
											"                    ],",
											"                    \"additionalProperties\": false",
											"                }",
											"            },",
											"            \"required\": [",
											"                \"id\",",
											"                \"name\",",
											"                \"price\",",
											"                \"discount\",",
											"                \"stock\",",
											"                \"description\",",
											"                \"categoryId\",",
											"                \"supplierId\",",
											"                \"category\",",
											"                \"supplier\"",
											"            ],",
											"            \"additionalProperties\": false",
											"        }",
											"    };",
											"",
											"    const responseJson = pm.response.json();  ",
											"    pm.expect(responseJson).to.be.jsonSchema(schema)     ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET BY ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Price is a non-negative number\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.price).to.be.a('number');",
											"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");",
											"});",
											"",
											"",
											"pm.test(\"Stock is a non-negative integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.stock).to.be.a('number');",
											"    pm.expect(responseData.stock).to.be.gte(0);",
											"});",
											"",
											"",
											"pm.test(\"Verify category object in the response\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.category).to.exist.and.to.be.an('object');",
											"    pm.expect(responseData.category).to.have.all.keys('id', 'name', 'description');",
											"});",
											"",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"    var schema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": { \"type\": \"integer\" },",
											"        \"name\": { \"type\": \"string\" },",
											"        \"price\": { \"type\": \"number\" },",
											"        \"discount\": { \"type\": \"number\" },",
											"        \"stock\": { \"type\": \"integer\" },",
											"        \"description\": { \"type\": [\"string\", \"null\"] },",
											"        \"categoryId\": { \"type\": \"integer\" },",
											"        \"supplierId\": { \"type\": \"integer\" },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"id\": { \"type\": \"integer\" },",
											"                \"name\": { \"type\": \"string\" },",
											"                \"description\": { \"type\": [\"string\", \"null\"] }",
											"            },",
											"            \"required\": [\"id\", \"name\", \"description\"]",
											"        },",
											"        \"supplier\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"id\": { \"type\": \"integer\" },",
											"                \"name\": { \"type\": \"string\" },",
											"                \"phoneNumber\": { \"type\": \"string\" },",
											"                \"email\": { \"type\": [\"string\", \"null\"] },",
											"                \"address\": { \"type\": \"string\" }",
											"            },",
											"            \"required\": [\"id\", \"name\", \"phoneNumber\", \"email\", \"address\"]",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"price\", \"discount\", \"stock\", \"description\", \"categoryId\", \"supplierId\", \"category\", \"supplier\"]",
											"};",
											"",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.jsonSchema(schema)",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/products/4",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"products",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC008 -  Create new product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {              ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Assert that object contains keys or properties\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.all.keys('id', 'name', 'description', 'price', 'stock', 'discount', 'categoryId', 'supplierId');         ",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"iPhone 16 Pro Max\",\n    \"price\": 10,\n    \"discount\": 0,\n    \"stock\": 10,\n    \"description\": \"New Desc\",\n    \"categoryId\": 4,\n    \"supplierId\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/products/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "TC008 -  Create new product - Price = 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {              ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"  var schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"statusCode\": { \"type\": \"number\" },",
											"            \"message\": { \"type\": \"array\" },        ",
											"            \"error\":  { \"type\": \"string\" }",
											"        },",
											"        \"required\": [\"statusCode\", \"message\", \"error\"],",
											"        \"additionalProperties\": false",
											"  };",
											"",
											"  const responseJson = pm.response.json();  ",
											"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
											"});",
											"",
											"pm.test(\"6. Values is correct'\", function () {",
											"  var jsonData = pm.response.json();",
											"  pm.expect(jsonData.statusCode).to.equal(400);",
											"  pm.expect(jsonData.message).to.contains('Price must be greater than 0');",
											"  pm.expect(jsonData.error).to.eql('Bad Request');",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"iPhone 16 Pro Max\",\n    \"price\": 0,\n    \"discount\": 0,\n    \"stock\": 10,\n    \"description\": \"New Desc\",\n    \"categoryId\": 4,\n    \"supplierId\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/products/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POST (Add image)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": []
										},
										{
											"key": "caption",
											"value": "Image 12",
											"type": "text"
										},
										{
											"key": "isMain",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/products/2/images",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"products",
										"2",
										"images"
									]
								}
							},
							"response": []
						},
						{
							"name": "TC007 -  Create new product (Price = -1)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {              ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Assert that object contains keys or properties\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.all.keys('id', 'name', 'description');         ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"New product\",\n    \"price\": -1,\n    \"discount\": 91,\n    \"stock\": 100,    \n    \"description\": \"New Desc\",\n    \"categoryId\": 1,\n    \"supplierId\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/products/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "POST - Discount (91)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {              ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Assert that object contains keys or properties\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.all.keys('id', 'name', 'description');         ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"1\",\n    \"price\": 1,\n    \"discount\": 91,\n    \"stock\": 100,    \n    \"description\": \"New Desc\",\n    \"categoryId\": 1,\n    \"supplierId\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/products/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "CREATE PRODUCT WITH Price > 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {              ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Assert that object contains keys or properties\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.all.keys('id', 'name', 'description');         ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"categoryId\": 1,\n    \"supplierId\": 2585,\n    \"name\": \"sdsds\",\n    \"price\": 55,\n    \"discount\": 5,\n    \"stock\": 5545,\n    \"description\": \"rerer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/products/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"products",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {              ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"",
											"pm.test(\"Assert that object contains keys or properties\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.all.keys('id', 'name', 'description');         ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sản phẩm 1055\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://server.aptech.io/online-shop/products/1055",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"products",
										"1055"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/online-shop/products/1",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"products",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Orders",
					"item": [
						{
							"name": "GET",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {     ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be an array\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"Assert that every object contains keys or properties\", () => {",
											"    const responseJson = pm.response.json();",
											"    responseJson.forEach(item => {        ",
											"        pm.expect(item).to.have.all.keys('id', 'name', 'description');",
											"    });        ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/online-shop/orders",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET BY ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {     ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"  var schema = {",
											"\"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {\"type\": \"integer\"},",
											"    \"createdDate\": {\"type\": \"string\", \"format\": \"date-time\"},",
											"    \"shippedDate\": {\"type\": \"string\", \"format\": \"date-time\"},",
											"    \"status\": {\"type\": \"string\", \"enum\": [\"COMPLETED\", \"WAITING\", \"CANCELLED\"]},",
											"    \"description\": {\"type\": [\"string\", \"null\" ]},",
											"    \"shippingAddress\": {\"type\": \"string\"},",
											"    \"shippingCity\": {\"type\": \"string\"},",
											"    \"paymentType\": {\"type\": \"string\", \"enum\": [\"CASH\", \"CREDIT_CARD\"]},",
											"    \"customerId\": {\"type\": \"integer\"},",
											"    \"employeeId\": {\"type\": \"integer\"},",
											"    \"customer\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {\"type\": \"integer\"},",
											"        \"firstName\": {\"type\": \"string\"},",
											"        \"lastName\": {\"type\": \"string\"},",
											"        \"phoneNumber\": {\"type\": [\"string\", \"null\" ]},",
											"        \"address\": {\"type\": \"string\"},",
											"        \"birthday\": {\"type\": \"string\", \"format\": \"date\"},",
											"        \"email\": {\"type\": \"string\", \"format\": \"email\"}",
											"      },",
											"      \"required\": [\"id\", \"firstName\", \"lastName\"]",
											"    },",
											"    \"employee\": {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {\"type\": \"integer\"},",
											"        \"firstName\": {\"type\": \"string\"},",
											"        \"lastName\": {\"type\": \"string\"},",
											"        \"phoneNumber\": {\"type\": \"string\"},",
											"        \"address\": {\"type\": \"string\"},",
											"        \"birthday\": {\"type\": \"string\", \"format\": \"date\"},",
											"        \"email\": {\"type\": \"string\", \"format\": \"email\"}",
											"      },",
											"      \"required\": [\"id\", \"firstName\", \"lastName\", \"phoneNumber\"]",
											"    },",
											"    \"orderDetails\": {",
											"      \"type\": \"array\",",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"quantity\": {\"type\": \"integer\", \"minimum\": 0},",
											"          \"price\": {\"type\": \"number\", \"minimum\": 0},",
											"          \"discount\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 100},",
											"          \"product\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"              \"id\": {\"type\": \"integer\"},",
											"              \"name\": {\"type\": \"string\"},",
											"              \"price\": {\"type\": \"number\", \"minimum\": 0},",
											"              \"discount\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 100},",
											"              \"stock\": {\"type\": \"integer\", \"minimum\": 0},",
											"              \"description\": {\"type\": \"string\"},",
											"              \"categoryId\": {\"type\": \"integer\"},",
											"              \"supplierId\": {\"type\": \"integer\"},",
											"              \"category\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                  \"id\": {\"type\": \"integer\"},",
											"                  \"name\": {\"type\": \"string\"},",
											"                  \"description\": {\"type\": \"string\"}",
											"                },",
											"                \"required\": [\"id\", \"name\"]",
											"              }",
											"            },",
											"            \"required\": [\"id\", \"name\", \"price\", \"stock\", \"categoryId\", \"supplierId\"]",
											"          }",
											"        },",
											"        \"required\": [\"quantity\", \"price\", \"product\"]",
											"      }",
											"    }",
											"  },",
											"  \"required\": [\"id\", \"createdDate\", \"shippedDate\", \"status\"]",
											"  };",
											"",
											"  const responseJson = pm.response.json();  ",
											"  pm.expect(responseJson).to.be.jsonSchema(schema)     ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/online-shop/orders/2398",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"orders",
										"2398"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET BY ID (using Chai Expect)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"",
											"pm.test(\"Validate the schema of the response body\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.have.property('id').that.is.a('number');    ",
											"    pm.expect(responseData).to.have.property('status').that.is.oneOf(['COMPLETED', 'WAITING', 'CANCELLED']);    ",
											"    pm.expect(responseData).to.have.property('orderDetails').that.is.an('array');",
											"    responseData.orderDetails.forEach(function(item) {",
											"        pm.expect(item).to.have.property('quantity');",
											"        pm.expect(item).to.have.property('price');",
											"        pm.expect(item).to.have.property('discount');        ",
											"        pm.expect(item).to.have.nested.property('product.id').to.satisfy(",
											"            number => Number.isInteger(number)",
											"        );",
											"        ",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/online-shop/orders/2398",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"orders",
										"2398"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", () => {",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"JSON must be an object\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Schema is valid\", () => {",
											"    var schema = {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"            \"id\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"createdDate\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"shippedDate\": {",
											"                \"type\": [",
											"                    \"string\",",
											"                    \"null\"",
											"                ]",
											"            },",
											"            \"shippingAddress\": {",
											"                \"type\": [",
											"                    \"string\",",
											"                    \"null\"",
											"                ]",
											"            },",
											"            \"shippingCity\": {",
											"                \"type\": [",
											"                    \"string\",",
											"                    \"null\"",
											"                ]",
											"            },",
											"            \"paymentType\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"status\": {",
											"                \"type\": \"string\"",
											"            },",
											"            \"description\": {",
											"                \"type\": [",
											"                    \"string\",",
											"                    \"null\"",
											"                ]",
											"            },",
											"            \"customerId\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"employeeId\": {",
											"                \"type\": \"integer\"",
											"            },",
											"            \"customer\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"firstName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"lastName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"email\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"address\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"phoneNumber\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"birthday\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                },",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"firstName\",",
											"                    \"lastName\",",
											"                    \"email\",",
											"                    \"address\",",
											"                    \"phoneNumber\",",
											"                    \"birthday\"",
											"                ]",
											"            },",
											"            \"employee\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {",
											"                        \"type\": \"integer\"",
											"                    },",
											"                    \"firstName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"lastName\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"email\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"address\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"phoneNumber\": {",
											"                        \"type\": \"string\"",
											"                    },",
											"                    \"birthday\": {",
											"                        \"type\": \"string\"",
											"                    }",
											"                },",
											"                \"required\": [",
											"                    \"id\",",
											"                    \"firstName\",",
											"                    \"lastName\",",
											"                    \"email\",",
											"                    \"address\",",
											"                    \"phoneNumber\",",
											"                    \"birthday\"",
											"                ]",
											"            },",
											"            \"orderDetails\": {",
											"                \"type\": \"array\",",
											"                \"items\": {",
											"                    \"type\": \"object\",",
											"                    \"properties\": {",
											"                        \"quantity\": {",
											"                            \"type\": \"integer\"",
											"                        },",
											"                        \"price\": {",
											"                            \"type\": \"number\"",
											"                        },",
											"                        \"discount\": {",
											"                            \"type\": \"number\"",
											"                        },",
											"                        \"product\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"id\": {",
											"                                    \"type\": \"integer\"",
											"                                },",
											"                                \"name\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"description\": {",
											"                                    \"type\": \"string\"",
											"                                },",
											"                                \"price\": {",
											"                                    \"type\": \"number\"",
											"                                },",
											"                                \"discount\": {",
											"                                    \"type\": \"number\"",
											"                                },",
											"                                \"stock\": {",
											"                                    \"type\": \"integer\"",
											"                                },",
											"                                \"categoryId\": {",
											"                                    \"type\": \"integer\"",
											"                                },",
											"                                \"supplierId\": {",
											"                                    \"type\": \"integer\"",
											"                                },",
											"                                \"category\": {",
											"                                    \"type\": \"object\",",
											"                                    \"properties\": {",
											"                                        \"id\": {",
											"                                            \"type\": \"integer\"",
											"                                        },",
											"                                        \"name\": {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"description\": {",
											"                                            \"type\": \"string\"",
											"                                        }",
											"                                    },",
											"                                    \"required\": [",
											"                                        \"id\",",
											"                                        \"name\",",
											"                                        \"description\"",
											"                                    ]",
											"                                },",
											"                                \"supplier\": {",
											"                                    \"type\": \"object\",",
											"                                    \"properties\": {",
											"                                        \"id\": {",
											"                                            \"type\": \"integer\"",
											"                                        },",
											"                                        \"name\": {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"email\": {",
											"                                            \"type\": [",
											"                                                \"string\",",
											"                                                \"null\"",
											"                                            ]",
											"                                        },",
											"                                        \"address\": {",
											"                                            \"type\": \"string\"",
											"                                        },",
											"                                        \"phoneNumber\": {",
											"                                            \"type\": \"string\"",
											"                                        }",
											"                                    },",
											"                                    \"required\": [",
											"                                        \"id\",",
											"                                        \"name\",",
											"                                        \"email\",",
											"                                        \"address\",",
											"                                        \"phoneNumber\"",
											"                                    ]",
											"                                }",
											"                            },",
											"                            \"required\": [",
											"                                \"id\",",
											"                                \"name\",",
											"                                \"description\",",
											"                                \"price\",",
											"                                \"discount\",",
											"                                \"stock\",",
											"                                \"categoryId\",",
											"                                \"supplierId\",",
											"                                \"category\",",
											"                                \"supplier\"",
											"                            ]",
											"                        }",
											"                    },",
											"                    \"required\": [",
											"                        \"quantity\",",
											"                        \"price\",",
											"                        \"discount\",",
											"                        \"product\"",
											"                    ]",
											"                }",
											"            }",
											"        },",
											"        \"required\": [",
											"            \"id\",",
											"            \"createdDate\",",
											"            \"shippedDate\",",
											"            \"shippingAddress\",",
											"            \"shippingCity\",",
											"            \"paymentType\",",
											"            \"status\",",
											"            \"description\",",
											"            \"customerId\",",
											"            \"employeeId\",",
											"            \"customer\",",
											"            \"employee\",",
											"            \"orderDetails\"",
											"        ]",
											"    };",
											"",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.jsonSchema(schema);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsImVtYWlsIjoidHVuZ250QHNvZnRlY2gudm4iLCJzdWIiOjIsImFwcGxpY2F0aW9uIjoiT25saW5lIFNob3AgLSBBUEkiLCJyb2xlcyI6W3siaWQiOjEsIm5hbWUiOiJBZG1pbmlzdHJhdG9ycyJ9XSwiaWF0IjoxNzMxMTU4MzkyLCJleHAiOjE3NjI3MTU5OTJ9.nArldV1Qh3c2dzo61IdW8yk9oahPWDUSVixBZKzf500",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerId\": 1,\n    \"employeeId\": 1,\n    \"createdDate\": \"2023-05-21\",    \n    \"status\": \"WAITING\",\n    \"paymentType\": \"CASH\",\n    \"orderDetails\": [\n        {\n            \"quantity\": 1,\n            \"price\": 1,\n            \"discount\": 0,\n            \"productId\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {              ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Assert that object contains keys or properties\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.all.keys('id', 'name', 'description');         ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customerId\": 1,\n    \"employeeId\": 1,\n    \"description\": \"123\",\n    \"orderDetails\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST (duplicate key)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {     ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"pm.test(\"Assert that object contains keys or properties\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.all.keys('error', 'errorMessage');         ",
											"});",
											"",
											"pm.test(\"Assert that errorMessage contains 'Cannot insert duplicate key'\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.errorMessage).to.include('Cannot insert duplicate key');         ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"New Product 1\",\n    \"description\": \"New Desc 1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://server.aptech.io/training/categories",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"training",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {              ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be a object\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"object\");",
											"});",
											"",
											"",
											"pm.test(\"Assert that object contains keys or properties\", () => {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.all.keys('id', 'name', 'description');         ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"Mô tả ... 2398\",\r\n    \"customerId\": 2,\r\n    \"employeeId\": 2,\r\n    \"orderDetails\": [\r\n        {\r\n            \"discount\": 5,\r\n            \"orderId\": 2397,\r\n            \"price\": 5314.683,\r\n            \"productId\": 7,\r\n            \"quantity\": 22\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://server.aptech.io/online-shop/orders/2398",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"orders",
										"2398"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH (410 Gone)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 410\", function () {",
											"    pm.response.to.have.status(410);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Sản phẩm 3883\",\r\n    \"description\": \"Mô tả ... 3883\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://server.aptech.io/training/categories/38831111",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"training",
										"categories",
										"38831111"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/training/categories/3882",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"training",
										"categories",
										"3882"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE (410 Gone)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 410\", function () {",
											"    pm.response.to.have.status(410);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/training/categories/3883233",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"training",
										"categories",
										"3883233"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Employees",
					"item": [
						{
							"name": "GET",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response must be valid and have a body\", function () {     ",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Json must be an array\", () => {",
											"  const responseJson = pm.response.json();",
											"  pm.expect(responseJson).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"5. Schema is valid\", () => {",
											"    var schema = {",
											"        type: \"array\",",
											"        items: {",
											"            type: \"object\",",
											"            properties: {",
											"                id: { type: \"number\" },",
											"                firstName: { type: \"string\" },",
											"                lastName: { type: \"string\" },",
											"                phoneNumber: { type:[ \"string\", \"null\"] },",
											"                address: { type: \"string\" },",
											"                birthday: { type: [ \"string\", \"null\"], format: \"date\" },",
											"                email: { type: \"string\", format: \"email\" }",
											"            },",
											"            required: [\"id\", \"firstName\", \"lastName\", \"phoneNumber\", \"address\", \"birthday\", \"email\"],",
											"            additionalProperties: false",
											"        }",
											"    };",
											"",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.be.jsonSchema(schema);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/online-shop/employees",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('1. Status code is 201', function () {\r",
											"  pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('2. Response time is less than 200ms', function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test('3. Response must be valid and have a body', function () {\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('4. Json must be a object', () => {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('5. Schema is valid', () => {\r",
											"  var schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"id\": {\"type\": \"number\"},\r",
											"            \"firstName\": {\"type\": \"string\"},        \r",
											"            \"lastName\": {\"type\": \"string\"},        \r",
											"            \"phoneNumber\":  {\"type\": [\"string\", \"null\"]},\r",
											"            \"address\":  {\"type\": \"string\"},\r",
											"            \"birthday\":  {\"type\": [\"string\", \"null\"]},\r",
											"            \"email\":  {\"type\": \"string\"}\r",
											"        },\r",
											"        \"required\": [\"id\", \"firstName\", \"lastName\", \"phoneNumber\", \"address\", \"birthday\", \"email\"]\r",
											"\r",
											"  };\r",
											"\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"1234333\",\r\n    \"firstName\": \"Yip1\",\r\n    \"lastName\": \"Yip\",\r\n    \"phoneNumber\": \"123456\",\r\n    \"address\": \"TX\",\r\n    \"birthday\": \"1980-04-10\",\r\n    \"email\": \"ap01111@gmail.com\",\r\n    \"password\": \"147258369\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://server.aptech.io/online-shop/employees",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"employees"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/training/suppliers/1033",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"training",
										"suppliers",
										"1033"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('1. Status code is 200', function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('2. Response time is less than 200ms', function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test('3. Response must be valid and have a body', function () {\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('4. Json must be a object', () => {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('5. Schema is valid', () => {\r",
											"  var schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"id\": {\"type\": \"number\"},\r",
											"            \"firstName\": {\"type\": \"string\"},        \r",
											"            \"lastName\": {\"type\": \"string\"},        \r",
											"            \"phoneNumber\":  {\"type\": [\"string\", \"null\"]},\r",
											"            \"address\":  {\"type\": \"string\"},\r",
											"            \"birthday\":  {\"type\": [\"string\", \"null\"]},\r",
											"            \"email\":  {\"type\": \"string\"}\r",
											"        },\r",
											"        \"required\": [\"id\", \"firstName\", \"lastName\", \"phoneNumber\", \"address\", \"birthday\", \"email\"]\r",
											"\r",
											"  };\r",
											"\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName1\": \"Sản phẩm 1031\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://server.aptech.io/online-shop/employees/1",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"employees",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET BY ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/training/suppliers/1",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"training",
										"suppliers",
										"1"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Customers",
					"item": [
						{
							"name": "GET",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response time is less than 200ms', function () {",
											"  pm.expect(pm.response.responseTime).to.be.below(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/online-shop/customers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('1. Status code is 201', function () {\r",
											"  pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('2. Response time is less than 200ms', function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test('3. Response must be valid and have a body', function () {\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('4. Json must be a object', () => {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('5. Schema is valid', () => {\r",
											"  var schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"id\": {\"type\": \"number\"},\r",
											"            \"firstName\": {\"type\": \"string\"},        \r",
											"            \"lastName\": {\"type\": \"string\"},        \r",
											"            \"phoneNumber\":  {\"type\": [\"string\", \"null\"]},\r",
											"            \"address\":  {\"type\": \"string\"},\r",
											"            \"birthday\":  {\"type\": [\"string\", \"null\"]},\r",
											"            \"email\":  {\"type\": \"string\"}\r",
											"        },\r",
											"        \"required\": [\"id\", \"firstName\", \"lastName\", \"phoneNumber\", \"address\", \"birthday\", \"email\"]\r",
											"\r",
											"  };\r",
											"\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\r\n    \"address\": \"{{$randomStreetAddress}}\",\r\n    \"birthday\": \"{{$randomDatePast}}\",\r\n    \"email\": \"{{$randomEmail}}\"    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://server.aptech.io/online-shop/customers",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"customers"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/online-shop/customers/1100",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"customers",
										"1100"
									]
								}
							},
							"response": []
						},
						{
							"name": "PATCH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('1. Status code is 200', function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('2. Response time is less than 200ms', function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test('3. Response must be valid and have a body', function () {\r",
											"  pm.response.to.be.withBody;\r",
											"  pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('4. Json must be a object', () => {\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson).to.be.an('object');\r",
											"});\r",
											"\r",
											"pm.test('5. Schema is valid', () => {\r",
											"  var schema = {\r",
											"        \"type\": \"object\",\r",
											"        \"properties\": {\r",
											"            \"id\": {\"type\": \"number\"},\r",
											"            \"firstName\": {\"type\": \"string\"},        \r",
											"            \"lastName\": {\"type\": \"string\"},        \r",
											"            \"phoneNumber\":  {\"type\": [\"string\", \"null\"]},\r",
											"            \"address\":  {\"type\": \"string\"},\r",
											"            \"birthday\":  {\"type\": [\"string\", \"null\"]},\r",
											"            \"email\":  {\"type\": \"string\"}\r",
											"        },\r",
											"        \"required\": [\"id\", \"firstName\", \"lastName\", \"phoneNumber\", \"address\", \"birthday\", \"email\"]\r",
											"\r",
											"  };\r",
											"\r",
											"  const responseJson = pm.response.json();\r",
											"  pm.expect(responseJson).to.be.jsonSchema(schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Võ Thịnh\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://server.aptech.io/online-shop/customers/1101",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"customers",
										"1101"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET BY ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://server.aptech.io/online-shop/customers/3",
									"protocol": "https",
									"host": [
										"server",
										"aptech",
										"io"
									],
									"path": [
										"online-shop",
										"customers",
										"3"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Get users (Basic Auth)",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "123456789",
											"type": "string"
										},
										{
											"key": "username",
											"value": "tungnt",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://training.softech.cloud/api/training/users/auth/basic",
									"protocol": "https",
									"host": [
										"training",
										"softech",
										"cloud"
									],
									"path": [
										"api",
										"training",
										"users",
										"auth",
										"basic"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get users(API-KEY Auth)",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "x-api-key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "aptech-tester-pro",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://training.softech.cloud/api/training/users/auth/api-key",
									"protocol": "https",
									"host": [
										"training",
										"softech",
										"cloud"
									],
									"path": [
										"api",
										"training",
										"users",
										"auth",
										"api-key"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "StockReceipt",
					"item": [
						{
							"name": "POST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{    \n    \"employeeId\": 1,    \n    \"receiptNumber\": \"I00002\",\n    \"description\": \"WAITING\",    \n    \"stockReceiptItems\": [\n        {\n            \"quantity\": 1,\n            \"price\": 1,\n            \"discount\": 0,\n            \"productId\": 2,\n            \"supplierId\": 1\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/online-shop/stockreceipts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"online-shop",
										"stockreceipts"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"var options = {",
							"  method: 'POST',",
							"  url: pm.collectionVariables.get(\"baseUrl\") + \"/auth/login\",",
							"  header: 'Content-Type:application/json',",
							"  body: {",
							"    mode: 'application/json',",
							"    raw: {",
							"        \"username\": \"tungnt@softech.vn\",",
							"        \"password\": \"123456789\"",
							"    }",
							"  }",
							"};",
							"",
							"// pm.sendRequest(options, function (err, response) {",
							"//     if (err === null) {",
							"//         var json = response.json();        ",
							"//         pm.collectionVariables.set(\"access_token\", json.access_token);                ",
							"//     }",
							"// });"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "🔗 Flows",
			"item": [
				{
					"name": "auth/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://server.aptech.io/auth/login",
							"protocol": "https",
							"host": [
								"server",
								"aptech",
								"io"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearer_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://server.aptech.io/online-shop/products",
							"protocol": "https",
							"host": [
								"server",
								"aptech",
								"io"
							],
							"path": [
								"online-shop",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create category",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{name}}\",\r\n    \"description\": \"{{description}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://server.aptech.io/online-shop/categories",
							"protocol": "https",
							"host": [
								"server",
								"aptech",
								"io"
							],
							"path": [
								"online-shop",
								"categories"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "🏦 Banking",
			"item": [
				{
					"name": "Account / Check PIN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accountNumber\": \"0905157803\",\r\n    \"pin\": \"123321\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/banking/accounts/check-pin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"banking",
								"accounts",
								"check-pin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Account / Check balance",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50TnVtYmVyIjoiMDkwNTE1NzgwMyIsInBpbiI6IjEyMzMyMSIsImlhdCI6MTczOTc2MjcwMywiZXhwIjoxNzcxMzIwMzAzfQ.OU7YEXlDvofO9OZ7iRYzPmHGiQD_oXPXhAl-ZoEWQTQ",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accountNumber\": \"0905157803\",\r\n    \"amount\": 500000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/banking/accounts/check-balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"banking",
								"accounts",
								"check-balance"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Quizzes",
			"item": [
				{
					"name": "questions/1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/quizzes/questions/67b30c7c6ba7c52c21c707a5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"quizzes",
								"questions",
								"67b30c7c6ba7c52c21c707a5"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Shopify",
			"item": [
				{
					"name": "Get products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<canvas id=\"myChart\" height=\"75\"></canvas>\r",
									"\r",
									"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> \r",
									"\r",
									"<script>\r",
									"    var ctx = document.getElementById(\"myChart\");\r",
									"\r",
									"    var myChart = new Chart(ctx, {\r",
									"        type: \"bar\",\r",
									"        data: {\r",
									"            labels: [\"Product 1\"],\r",
									"            datasets: [{\r",
									"                label: 'Inventory Quantity',\r",
									"                data: [0],\r",
									"                \r",
									"                // Change these colours to customize the chart\r",
									"                backgroundColor: [\"#003f5c\"],\r",
									"            }]\r",
									"        },\r",
									"        options: {\r",
									"            title: {\r",
									"                display: true,\r",
									"                text: 'Inventory Quantity'\r",
									"            },\r",
									"            scales: {\r",
									"                xAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Product'\r",
									"                    }\r",
									"                }],\r",
									"                yAxes: [{\r",
									"                    display: true,\r",
									"                    scaleLabel: {\r",
									"                        display: true,\r",
									"                        labelString: 'Quantity'\r",
									"                    }\r",
									"                }]\r",
									"            }\r",
									"        }\r",
									"\r",
									"    });\r",
									"\r",
									"    // Access the data passed to pm.visualizer.set() from the JavaScript\r",
									"    // code of the Visualizer template\r",
									"    pm.getData(function (err, value) {\r",
									"        var inventoryQuantities = value.response.map(product => product.variants[0].inventory_quantity);\r",
									"        var productTitles = value.response.map(product => product.title);\r",
									"        myChart.data.datasets[0].data = inventoryQuantities;\r",
									"        myChart.data.labels = productTitles;\r",
									"        myChart.update();\r",
									"    });\r",
									"\r",
									"</script>`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    var res = pm.response.json();\r",
									"    \r",
									"    var visualizerData = res.map(product => {\r",
									"        return {\r",
									"            title: product.title,\r",
									"            variants: product.variants\r",
									"        };\r",
									"    });\r",
									"\r",
									"    return {response: visualizerData};\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3003/shopify/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3003",
							"path": [
								"shopify",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search products",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3003/shopify/products/search?keyword=Apple iPhone 16 Pro Max",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3003",
							"path": [
								"shopify",
								"products",
								"search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "Apple iPhone 16 Pro Max"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Administrators\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/roles",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"  var schema = {",
									"    \"type\": \"object\",",
									"    \"properties\": {",
									"      \"loggedInUser\": {",
									"        \"type\": \"object\"",
									"      },",
									"      \"access_token\": {",
									"        \"type\": \"string\"",
									"      },",
									"      \"refresh_token\": {",
									"        \"type\": \"string\"",
									"      },",
									"    },",
									"    \"required\": [\"loggedInUser\", \"access_token\", \"refresh_token\"],",
									"    \"additionalProperties\": false",
									"  };",
									"",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson).to.be.jsonSchema(schema)",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth/login (401 #1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"tungnt@softech.vn\",\r\n    \"password\": \"123456788\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth/refresh-token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiaWF0IjoxNzMxMTU4MzkyLCJleHAiOjE3MzE3NjMxOTJ9.mpYWo9HTHVlzZuJ7SYgT6pFy1nRsLO5ufWgqTVBqHq4\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/refresh-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth/login-failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response time is less than 100ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(100);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"tungnt@softech.vn\",\r\n    \"password\": \"1234567891\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://server.aptech.io/training/auth/login",
							"protocol": "https",
							"host": [
								"server",
								"aptech",
								"io"
							],
							"path": [
								"training",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth/profile",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3003/auth/profile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3003",
							"path": [
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth/basic",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "aptech",
									"type": "string"
								},
								{
									"key": "username",
									"value": "aptech",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://server.aptech.io/auth/basic",
							"protocol": "https",
							"host": [
								"server",
								"aptech",
								"io"
							],
							"path": [
								"auth",
								"basic"
							]
						}
					},
					"response": []
				},
				{
					"name": "X-API-KEY",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "aptech-tester-pro",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/x-api-key",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"x-api-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Users Copy",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3003/auth/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3003",
							"path": [
								"auth",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Roles",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3003/auth/roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3003",
							"path": [
								"auth",
								"roles"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://server.aptech.io/auth/basic",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "aptech",
									"type": "string"
								},
								{
									"key": "password",
									"value": "aptech",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://server.aptech.io/auth/basic",
							"protocol": "https",
							"host": [
								"server",
								"aptech",
								"io"
							],
							"path": [
								"auth",
								"basic"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://os-admin.aptech.io/login",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://os-admin.aptech.io/login",
							"protocol": "https",
							"host": [
								"os-admin",
								"aptech",
								"io"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://api.fpt.ai/hmi/tts/v5",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "3rU2Bt7FDvyAg3WEa7arINTt7XPw1FUh",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "Chào các bạn! Chúc các bạn hoàn thành tốt khóa học kiểm thử phần mềm",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://api.fpt.ai/hmi/tts/v5",
							"protocol": "https",
							"host": [
								"api",
								"fpt",
								"ai"
							],
							"path": [
								"hmi",
								"tts",
								"v5"
							]
						}
					},
					"response": []
				},
				{
					"name": " https://server.aptech.io/auth/x-api-key",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "aptech-tester-pro",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://server.aptech.io/auth/x-api-key",
							"protocol": "https",
							"host": [
								"server",
								"aptech",
								"io"
							],
							"path": [
								"auth",
								"x-api-key"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://server.aptech.io"
		},
		{
			"key": "access_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJ0dW5nbnRAc29mdGVjaC52biIsInN1YiI6MSwiYXBwbGljYXRpb24iOiJPbmxpbmUgU2hvcCAtIEFQSSIsInJvbGVzIjpbeyJpZCI6MSwibmFtZSI6IkFkbWluaXN0cmF0b3JzIiwiZGVzY3JpcHRpb24iOiIxMjMifSx7ImlkIjoyLCJuYW1lIjoiTWFuYWdlcnMiLCJkZXNjcmlwdGlvbiI6bnVsbH0seyJpZCI6NCwibmFtZSI6IlVzZXJzIiwiZGVzY3JpcHRpb24iOm51bGx9LHsiaWQiOjcsIm5hbWUiOiJMZWFkZXJzICIsImRlc2NyaXB0aW9uIjoiUHJvamVjdCBsZWFkZXIifSx7ImlkIjo4LCJuYW1lIjoiVGVzdGVyIiwiZGVzY3JpcHRpb24iOiJ0ZXN0In0seyJpZCI6MTAxMywibmFtZSI6IkNsaWVudCIsImRlc2NyaXB0aW9uIjoiIn0seyJpZCI6MTAxNCwibmFtZSI6IkRldmVsb3BlciIsImRlc2NyaXB0aW9uIjoiIn1dLCJpYXQiOjE3NTMyNTc3NjQsImV4cCI6MTc4NDgxNTM2NH0.f_BI78mqBSTkNMwlPLdD5L-hxyFdOnvjd5Pgbg8PbhU"
		}
	]
}